generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comments {
  id        Int      @id @default(autoincrement())
  userId    Int?
  imageId   Int?
  text      String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  images    images?  @relation(fields: [imageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users     users?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model images {
  id            Int        @id @default(autoincrement())
  userId        Int?
  title         String
  subtitle      String?
  pictureLink   String
  pictureSerial String
  createdAt     DateTime   @default(now()) @db.Timestamp(6)
  comments      comments[]
  users         users?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([title], map: "idx_images_title")
}

model profilePictures {
  id            Int      @id @default(autoincrement())
  userId        Int?
  pictureLink   String
  pictureSerial String
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  users         users?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id              Int               @id @default(autoincrement())
  userName        String
  password        String
  email           String
  createdAt       DateTime          @default(now()) @db.Timestamp(6)
  comments        comments[]
  images          images[]
  profilePictures profilePictures[]
  sessions        sessions[]

  @@index([userName], map: "idx_users_name")
}

model sessions {
  id        Int      @id @default(autoincrement())
  userId    Int?
  token     String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  users     users?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
